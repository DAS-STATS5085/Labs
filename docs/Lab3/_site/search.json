[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Week 4: Introduction to Quarto",
    "section": "",
    "text": "This week we will take what we have learned in previous weeks and produce a report using Quarto . Quarto is a multi-language system that allows reports and presentation to be created within R, thus allowing for R code and output to be easily embedded within a report, a presentation or even a Blog!. Hence, all of the R code and plots obtained from an analysis are contained within a single file.\nUnder Week 5 on Moodle there is an Example Report produced using Quarto relating to fitting a regression model using one numerical explanatory variable that was done in Week 4. The corresponding Quarto .qmd file can also be downloaded and opened in R to see how the document was produced (press the Render button to create the HTML/PDF version). It is advised to have this document open within RStudio while working through the remaining sections in order to see examples put into practice.\nThe following sections will take you through the different steps required to produce the Example Report on Moodle. For creating a new Quarto file from scratch see Section 1.1, otherwise move onto Section 2.\n\nIf you want to create a new R Markdown document from scratch within RStudio you can go to:\nFile -&gt; New File -&gt; Quarto  Document...\nThis will open the following window within RStudio:\n\n\n\n\n\n\n\n\n\n\nImportant\n\n\n\nBefore creating your first Quarto document, be sure that you have the latest RStudio version installed.\n\n\nFrom here select Document and the Default Output Format as PDF or HTML. Give your document a title and select OK. This will open within RStudio an empty .qmd file.\n\n\n\n\n\n\nNote\n\n\n\nYou can download this template containing simple instructions on how to do some basic stuff using Quarto . To see what the HTML/PDF of the template document looks like click on the Render button at the top of the document window."
  },
  {
    "objectID": "index.html#creating-a-new-quarto-document-from-scratch",
    "href": "index.html#creating-a-new-quarto-document-from-scratch",
    "title": "Week 4: Introduction to Quarto",
    "section": "",
    "text": "If you want to create a new R Markdown document from scratch within RStudio you can go to:\nFile -&gt; New File -&gt; Quarto  Document...\nThis will open the following window within RStudio:\n\n\n\n\n\n\n\n\n\n\nImportant\n\n\n\nBefore creating your first Quarto document, be sure that you have the latest RStudio version installed.\n\n\nFrom here select Document and the Default Output Format as PDF or HTML. Give your document a title and select OK. This will open within RStudio an empty .qmd file.\n\n\n\n\n\n\nNote\n\n\n\nYou can download this template containing simple instructions on how to do some basic stuff using Quarto . To see what the HTML/PDF of the template document looks like click on the Render button at the top of the document window."
  },
  {
    "objectID": "index.html#code-chunks",
    "href": "index.html#code-chunks",
    "title": "Week 4: Introduction to Quarto",
    "section": "\n4.1 Code chunks",
    "text": "4.1 Code chunks\nCode chunks allow for R code to be embedded within a document. Not only can the code be easily included within a document, the code can also be evaluated. Hence, you can produce an entire report based on an analysis that is contained within a single file instead of having separate files containing your R code, plot images and comments.\nR Code can be evaluated directly on the Quarto document or in the R console (the latter would be similar to run your code from an R script). To select where you want your code to be evaluated click on the setting options  (next to the Render button  ) and choose between Chunk Output Inline (default) if you want your code to be evaluated within the Quarto document or Chunk Output in Console to evaluate your code directly on the R console. If you select the latter, the following options will be added to the document preamble:\neditor_options: \n  chunk_output_type: inline\nTo add an R Code Chunk you can simply click on the  symbol (or using keyboard shortcut cmd+alt+i or ctrl+alt+i for windows users) on either visual or source modes.\nR code chunks are identified with {r} with multiple (optional) chunk options which we can access by typing #| at the beginning of the line.\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nIf you are in the source mode the R chunks will appear as follow:\n```{r}\n\n```\n\n\nSome of the most common arguments you will use in your R Chunks are:\n\n\necho: include the R code within the code chunk in the document (true/false);\n\neval: evaluate the R code within the code chunk (true/false);\n\nwarning: suppress warnings from R (true/false); and\n\nmessage: suppress messages from R (true/false).\n\nFor example, let’s say we wanted to select the score and bty_avg variables from the evals data set to be used later, we can do that using the following code chunk:\n{r}\n#| echo: false\nlibrary(tidyverse)\nlibrary(moderndive)\nevals.scores &lt;- evals |&gt;\n  select(score, bty_avg)\nSetting echo: false will tell the R to evaluate the code while hiding the R chunk from the main document. In this example, we will store the subsetted data set as the object evals.scores so that it can be used later . If you want to embed the code within the Quarto document then you would simply set echo: true.\n\n\n\n\n\n\nImportant\n\n\n\nR chunk options are case sensitive! so echo: TRUE or echo: FALSE won’t work! You can use R Studio autocomplete feature the see the available options by pressing the tab key.\n\n\nNote that by default Quarto will set echo: true . Alternatively, you can edit the Quarto preamble and change the global output options to show or hide all R chunks. You can do this within the execute options as follows (you can manually override this by changing the echo option in each individual chunk) :\n---\ntitle: \"My title\"\nnumber-sections: true\nexecute:\n  echo: false\n---\n\n\n\n\n\n\nImportant\n\n\n\nYou need to be very careful with the indentation if you decide to change the global settings of Quarto preamble!\n\n\nLets look at another example:\n\nCode```{r}\n#| message: false\n#| warning: false\nlibrary(gapminder)\nlibrary(skimr)\nlibrary(ggplot2)\n```\n\n\nIn this case, we set warning and message to false to indicate that we want to suppress any warnings or messages (e.g., the ones that you usually get when loading R packages). Another useful options is eval. If we set eval: false then we indicate that we don’t want the chunk output to be included in the rendered document (this is useful for example if we just want to show our R code without rendering its output):\n\nCode```{r}\n#| eval: false\n\nggplot(data=evals.scores,aes(y=score,x=bty_avg)) +\n  geom_point()\n```\n\n\n\n\n\n\n\n\nNote\n\n\n\nNote that we can still run the code in each individual chunk (even if we set eval: false) by clicking the run chunk bottom. The code will be evaluated in either your .qmd file or in the console depending on the Chunk output settings (this mean that can test your code in R but its output won;t be rendered in the final dicument).\n\n\nAdditional arguments can be passed to code chunks other than those displayed above. The most useful ones other than those relate to figure sizing and positioning and are discussed in the upcoming sections."
  },
  {
    "objectID": "index.html#inline-code",
    "href": "index.html#inline-code",
    "title": "Week 4: Introduction to Quarto",
    "section": "\n4.2 Inline code",
    "text": "4.2 Inline code\nR code can be included within text by enclosing the code with `r `. This allows for expressions to be evaluated by R and not be hardwired by the user. For example, if you wanted to convey the number of observations within evals.scores then we can enclose nrow(evals.scores) within `r ` to obtain the number of observations, rather than hardwiring 463 into the text. This can help to prevent potential human error when presenting information. It can also help with consistency and ease-of-use, since n = nrow(evals.scores) could be stored as an R object and referred to whenever necessary within the text using inline R code."
  },
  {
    "objectID": "index.html#tables-by-hand",
    "href": "index.html#tables-by-hand",
    "title": "Week 4: Introduction to Quarto",
    "section": "\n5.1 Tables ‘by hand’",
    "text": "5.1 Tables ‘by hand’\nTables can also be produced ‘by hand’ in Quarto . For example, the table above corresponding to the first 5 rows of the iris data can be produced by hand by clicking on the Table option in the toolbar (next to Insert▾ while using the visual mode) and selecting the number of rows and columns.\n\n\n\n\nWe can manually fill each entry to produce the following table:\n\nThe fist 5 rows of the iris data.\n\nSepal Length\nSepal Width\nPetal Length\nPetal Width\nSpecies\n\n\n\n5.1\n3.5\n1.4\n0.2\nsetosa\n\n\n4.9\n3.0\n1.4\n0.2\nsetosa\n\n\n4.7\n3.2\n1.3\n0.2\nsetosa\n\n\n4.6\n3.1\n1.5\n0.2\nsetosa\n\n\n5.0\n3.6\n1.4\n0.2\nsetosa\n\n\n\nIf you then go to the source mode you will see the raw markdown code that produced this table:\n| Sepal Length | Sepal Width | Petal Length | Petal Width | Species |\n|:------------:|:-----------:|:------------:|:-----------:|--------:|\n|     5.1      |     3.5     |     1.4      |     0.2     |  setosa |\n|     4.9      |     3.0     |     1.4      |     0.2     |  setosa |\n|     4.7      |     3.2     |     1.3      |     0.2     |  setosa |\n|     4.6      |     3.1     |     1.5      |     0.2     |  setosa |\n|     5.0      |     3.6     |     1.4      |     0.2     |  setosa |\n: The fist 5 rows of the iris data. {#tbl-iris}\nIn here, the vertical separators | are used between columns, while --- is placed below table/column headings. Alignment of the columns is done using colons, that is, for left alignment put :---, for right alignment put ---:, and for centred alignment put :---:. For these sorts of tables, you can add a caption below the table and then include a #tbl- label in braces at the end of the caption for cross-referencing.\n\n\n\n\n\n\nNote\n\n\n\nYou can read more about authoring Quarto tables here."
  },
  {
    "objectID": "index.html#embedding-external-images",
    "href": "index.html#embedding-external-images",
    "title": "Week 4: Introduction to Quarto",
    "section": "\n6.1 Embedding external images",
    "text": "6.1 Embedding external images\nIncluding plots and figures within a Quarto document is straightforward. To include an external figure you can use the visual mode tool bar and click on Insert▾➠ Figure/Image... and then browse to the path where you image is, or alternatively write the url from which the image should be obtained. The pop-up windows allows you also to write a caption and also to modify the image alignment with respect the main text.\n\n\n\n\nIf you want to add cross-referencing you can add the fig- prefix in the attributes tab of the pop-up windows:\n\n\n\n\nThe source code would then look something like:\n![](images/myimage.png){#fig-image1}"
  },
  {
    "objectID": "index.html#embedding-r-generated-figures",
    "href": "index.html#embedding-r-generated-figures",
    "title": "Week 4: Introduction to Quarto",
    "section": "\n6.2 Embedding R generated figures",
    "text": "6.2 Embedding R generated figures\nVery often we would like to use the R plots generated from your analysis instead of using external figures. To achieve this, the R code for the plot is simply included within a code chunk including additional arguments for plot size and positioning. For example, to include the scatterplot of teaching and beauty:\n\nCode```{r}\n#| label: fig-scatterplot1\n#| fig-cap: Relationship between teaching and beauty scores. The best-fitting line has been superimposed.\n#| fig-width: 4\n#| fig-height: 5\n#| fig-align: center\n#| message: false\n\nggplot(evals.scores, aes(x = bty_avg, y = score)) +\n  geom_point() +\n  labs(x = \"Beauty Score\", y = \"Teaching Score\") +\n  geom_smooth(method = \"lm\", se = FALSE)\n```\n\n\n\nFigure 1: Relationship between teaching and beauty scores. The best-fitting line has been superimposed.\n\n\n\nHere, we set the chunk label to include the fig- prefix so we can cross-reference using the @ prefix. For example @fig-scatterplot1 will create a hyperlink to Figure 1. Then we added a figure caption using the fig-cap option. For size and positioning of the figure we can include:\n\n\nfig.width: an integer value denoting the width of the figure;\n\nfig.height: an integer value denoting the height of the figure;\n\nfig.align: the alignment of the figure within the body of the document\n\n\n\n\n\n\n\n Question\n\n\n\nWhat other argument would you need to include if you wish to show the chunk plot output only?\n\neval: false\necho: true\necho: false\neval: true\n\n\n\n\n\n\n\n\nNote\n\n\n\nYou can read more about authoring Quarto tables here."
  },
  {
    "objectID": "webexercises.html",
    "href": "webexercises.html",
    "title": "Webexercises",
    "section": "",
    "text": "This is a Web Exercise template created by the psychology teaching team at the University of Glasgow, based on ideas from Software Carpentry. This template shows how instructors can easily create interactive web documents that students can use in self-guided learning.\nThe {webexercises} package provides a number of functions that you use in inline R code or through code chunk options to create HTML widgets (text boxes, pull down menus, buttons that reveal hidden content). Examples are given below. Render this file to HTML to see how it works.\nNOTE: To use the widgets in the compiled HTML file, you need to have a JavaScript-enabled browser."
  },
  {
    "objectID": "webexercises.html#example-questions",
    "href": "webexercises.html#example-questions",
    "title": "Webexercises",
    "section": "Example Questions",
    "text": "Example Questions\n\nFill-In-The-Blanks (fitb())\nCreate fill-in-the-blank questions using fitb(), providing the answer as the first argument.\n\n2 + 2 is \n\nYou can also create these questions dynamically, using variables from your R session.\n\nThe square root of 64 is: \n\nThe blanks are case-sensitive; if you don’t care about case, use the argument ignore_case = TRUE.\n\nWhat is the letter after D? \n\nIf you want to ignore differences in whitespace use, use the argument ignore_ws = TRUE (which is the default) and include spaces in your answer anywhere they could be acceptable.\n\nHow do you load the tidyverse package? \n\nYou can set more than one possible correct answer by setting the answers as a vector.\n\nType a vowel: \n\nYou can use regular expressions to test answers against more complex rules.\n\nType any 3 letters: \n\n\n\nMultiple Choice (mcq())\n\n“Never gonna give you up, never gonna: let you goturn you downrun awaylet you down”\n“I bless the rainsguess it rainssense the rain down in Africa” -Toto\n\n\n\nTrue or False (torf())\n\nTrue or False? You can permute values in a vector using sample(). TRUEFALSE\n\n\n\nLonger MCQs (longmcq())\nWhen your answers are very long, sometimes a drop-down select box gets formatted oddly. You can use longmcq() to deal with this. Since the answers are long, It’s probably best to set up the options inside an R chunk with echo=FALSE.\nWhat is a p-value?\n\n the probability that the null hypothesis is true the probability of the observed, or more extreme, data, under the assumption that the null-hypothesis is true the probability of making an error in your conclusion\n\nWhat is true about a 95% confidence interval of the mean?\n\n if you repeated the process many times, 95% of intervals calculated in this way contain the true mean there is a 95% probability that the true mean lies within this range 95% of the data fall within this range"
  },
  {
    "objectID": "webexercises.html#checked-sections",
    "href": "webexercises.html#checked-sections",
    "title": "Webexercises",
    "section": "Checked sections",
    "text": "Checked sections\nCreate sections with the class webex-check to add a button that hides feedback until it is pressed. Add the class webex-box to draw a box around the section (or use your own styles).\n\nI am going to learn a lot: TRUEFALSE\nWhat is a p-value?\n\n the probability that the null hypothesis is true the probability of the observed, or more extreme, data, under the assumption that the null-hypothesis is true the probability of making an error in your conclusion"
  },
  {
    "objectID": "webexercises.html#hidden-solutions-and-hints",
    "href": "webexercises.html#hidden-solutions-and-hints",
    "title": "Webexercises",
    "section": "Hidden solutions and hints",
    "text": "Hidden solutions and hints\nYou can fence off a solution area that will be hidden behind a button using hide() before the solution and unhide() after, each as inline R code. Pass the text you want to appear on the button to the hide() function.\nIf the solution is a code chunk, instead of using hide() and unhide(), simply set the webex.hide chunk option to TRUE, or set it to the string you wish to display on the button.\nRecreate the scatterplot below, using the built-in cars dataset.\n\n\n\n\n\n\n\nI need a hint\n\nSee the documentation for plot() (?plot)\n\n\n\n\n\nClick here to see the solution\n\nplot(cars$speed, cars$dist)"
  },
  {
    "objectID": "Example_report.html",
    "href": "Example_report.html",
    "title": "Data Analysis: Example Report",
    "section": "",
    "text": "1 Introduction\nThere are hundreds of species of flowering plants, with one such genus known as the iris. Edgar Anderson procured measurements (in centimetres) from 150 different flowers from three different iris species. The measurements are on the petal length and width, and sepal length and width from each flower. The three different iris species are the setosa, versicolor, and virginica. Here, we shall analyse the relationship between sepal width and sepal length and see whether the relationship, if any, is different across the three species of iris.\nSection Section 2 consists of an exploratory analysis of the iris data and explores the potential relationship between sepal width and length, and whether there are any differences between the three species of the iris genus. Section Section 3 contains the results from fitting a multiple regression model to the data, as well as the assessment of the model assumptions. Concluding remarks are given in Section @s .\n\n\n2 Exploratory data analysis\nTable Table 1 displays the mean, median and standard deviation for sepal width and length for each of the three different species of iris. From Table Table 1, we can see that the sepal length is, on average, greater than sepal width. The species v. setosa has the shortest, on average, sepal length, followed by v. versicolor and then v. virginica with the longest average petal length. However, the species setosa has the largest, on average, sepal width, followed by v. virginica and v. versicolor, respectively. From the standard deviation, the variability in sepal width is relatively similar for each species, however, there is more variability in sepal length, with the standard deviation for the species v. virginica almost twice that of the species v. setosa.\n\n\n\n\n\n\nTable 1:  Mean, median and standard deviation (sd) sepal width and length by\nspecies of iris. \n  \n    \n    \n      Species\n      Width (Mean)\n      Width (Median)\n      Width (sd)\n      Length (Mean)\n      Length (Median)\n      Length (sd)\n    \n  \n  \n    setosa\n3.43\n3.40\n0.38\n5.01\n5.00\n0.35\n    versicolor\n2.77\n2.80\n0.31\n5.94\n5.90\n0.52\n    virginica\n2.97\n3.00\n0.32\n6.59\n6.50\n0.64\n  \n  \n  \n\n\n\n\n\nTable Table 2 displays the correlation between sepal width and length for each species of iris. Here, we can see that there is strong positive correlation between sepal width and length for the species setosa (0.743), while there is moderate and weak positive correlation for the species versicolor (0.526) and virginica (0.457), respectively.\n\n\n\n\n\n\nTable 2:  Correlation between sepal width and length by species. \n  \n    \n    \n      Species\n      Correlation\n    \n  \n  \n    setosa\n0.74\n    versicolor\n0.53\n    virginica\n0.46\n  \n  \n  \n\n\n\n\n\nFigure Figure 1 displays the relationship between sepal width and length by species. As sepal length increases, sepal width tends to increase, that is, there appears to be a positive linear relationship. Sepal length tends to be greater for the species virginica, followed by versicolor, with setosa tending to have the shortest sepal length. However, the setosa species tends to have longer sepal width, with setosa in a clear ‘cluster’ on its own.\n\n\n\n\n\nFigure 1: Relationship between sepal width and sepal length by species.\n\n\n\n\n\n\n3 Formal data analysis\nWe start by fitting the full multiple regression model containing all explanatory variables and separate regression lines for each species. The full model can be written as:\n\\[\\begin{align}\ny_{i} &= \\alpha + \\beta_1 \\cdot x_{1i} + \\beta_2 \\cdot x_{2i} + \\beta_3 \\cdot x_{1i} \\cdot x_{2i} + \\epsilon_i, ~~~~ \\epsilon_i \\sim N(0, \\sigma^2), ~~~~ i=1,\\ldots,150 \\nonumber \\\\\n&= \\alpha + \\beta_{\\mbox{length}} \\cdot \\mbox{length} + \\beta_{\\mbox{species}} \\cdot \\mathbb{I}_{\\mbox{species}}(x) + \\beta_{\\mbox{length, species}} \\cdot \\mbox{length} \\cdot \\mathbb{I}_{\\mbox{species}}(x) + \\epsilon_i, \\nonumber\n\\end{align}\\]\nwhere\n\n\\(\\alpha\\) is the intercept of the regression line for the baseline species (setosa);\n\\(\\beta_{\\mbox{length}}\\) is the slope of the regression line for the baseline species (setosa);\n\\(\\beta_{\\mbox{species}}\\) is the additional term added to \\(\\alpha\\) to get the intercept of the regression line for the specified species;\n\\(\\beta_{\\mbox{length, species}}\\) is the additional term added to \\(\\beta_{\\mbox{length}}\\) to get the slope of the regression line for the specified species; and\n\\(\\mathbb{I}_{\\mbox{species}}(x)\\) is an indicator function indicating the chosen species.\n\nStepwise regression with backward selection will be used to determine whether the full model can be reduced based on the Akaike information criterion (AIC). Hence, the model which results in the lowest AIC will result in the final model fitted to the data. In this case, the final model detailed above with separate regression lines for each species provides the lowest AIC (-384.34). The regression coefficients from the model are displayed in Table Table 3.\n\n\n\n\n\n\nTable 3:  Estimates of the regression model coefficients. \n  \n    \n    \n      term\n      estimate\n      p_value\n    \n  \n  \n    intercept\n−0.57\n0.31\n    Sepal.Length\n0.80\n0.00\n    Species: versicolor\n1.44\n0.04\n    Species: virginica\n2.02\n0.00\n    Sepal.Length:Speciesversicolor\n−0.48\n0.00\n    Sepal.Length:Speciesvirginica\n−0.57\n0.00\n  \n  \n  \n\n\n\n\n\nHence, from Table Table 3 we obtain the following regression lines:\n\\[\\begin{align}\n\\widehat{\\mbox{width}}_{\\mbox{setosa}} &= -0.569 + 0.799 \\cdot \\mbox{length} \\\\\\widehat{\\mbox{width}}_{\\mbox{versicolor}} &= 0.873 + 0.32 \\cdot \\mbox{length} \\\\\\widehat{\\mbox{width}}_{\\mbox{virginica}} &= 1.447 + 0.232 \\cdot \\mbox{length}\n\\end{align}\\]\nThat is, the relationship between sepal width and sepal length differs by species. For example, for the species setosa, sepal width increases, on average, by 0.799 for every one unit increase in sepal length. Hence, sepal width increases quicker with length than it does for the other two species (0.32 and 0.232, respectively). The separate regression lines for each species are displayed in Figure Figure 2 .\n\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\nFigure 2: Relationship between sepal width and sepal length by species with the regression lines superimposed.\n\n\n\n\nFigure Figure 3 displays the residuals versus sepal length and the fitted values for each species, respectively. The assumptions of the residuals having mean zero and constant variance across all values of the explanatory variable (sepal length), as well as the fitted values, appear to hold. This is observed from the even scatter of points above and below the zero line indicating the residuals have mean zero. The scattering of the points is also constant across all values of sepal length with no systematic pattern observed in the residuals.\n\n\n\n\n\nFigure 3: Residuals versus sepal length (left) and the fitted values (right) by species.\n\n\n\n\nFigure Figure 4 displays histograms of the residuals by species. Here we can see that the residuals appear to be bell-shaped and centred at zero. Hence, the assumption of having normally distributed residuals with mean zero appears to be valid.\n\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\nFigure 4: Histograms of the residuals by species.\n\n\n\n\n\n\n4 Conclusions\nSepal width and sepal length are positively related, with sepal width increasing with increasing sepal length. This relationship was found to be different by species, with separate regression lines having to be fitted by species. The species setosa has a stronger relationship between sepal width and length, where sepal width increases, on average, by 0.799 with every one unit increase in length. In comparison, the species versicolor and virginica have a more similar relationship, with sepal width increasing, on average, by 0.32 and 0.232, respectively, with every one unit increase in sepal length."
  },
  {
    "objectID": "my_quarto.html",
    "href": "my_quarto.html",
    "title": "My title",
    "section": "",
    "text": "1 Introduction"
  }
]